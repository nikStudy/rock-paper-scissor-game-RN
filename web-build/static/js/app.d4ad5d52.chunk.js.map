{"version":3,"sources":["src/components/PlayScreen.js","App.js","web-build/register-service-worker.js","src/signs/rock.png","src/signs/paper.png","src/signs/scissors.png"],"names":["rock","require","paper","scissors","randomSign","signs","Math","floor","random","length","bgColors","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","counterContainer","width","counterText","fontSize","color","image","height","btnContainer","marginTop","position","bottom","PlayScreen","useState","counter","setCounter","useEffect","timer","setTimeout","prevCounter","clearTimeout","View","style","compose","Text","Image","source","Button","onPress","title","App","playMode","setPlayMode","header","emoji","StatusBar","margin","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","module","exports"],"mappings":"0MAGMA,EAAOC,EAAQ,IACfC,EAAQD,EAAQ,IAChBE,EAAWF,EAAQ,IAGnBG,EAAa,WACf,IAAMC,EAAQ,CAACL,EAAME,EAAOC,GAE5B,OAAOE,EADMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,UAI5CC,EAAW,CAAC,UAAW,UAAW,WAqClCC,EAASC,IAAWC,OAAO,CAC7BC,UAAW,CACPC,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,UAEpBC,iBAAkB,CACdJ,KAAM,EACNK,MAAO,OACPH,WAAY,SACZC,eAAgB,UAEpBG,YAAa,CACTC,SAAU,IACVC,MAAO,QAEXC,MAAO,CACHJ,MAAO,IACPK,OAAQ,KAEZC,aAAc,CACVC,UAAW,GACXP,MAAO,IACPQ,SAAU,WACVC,OAAQ,MAIDC,EAhEI,WAAO,IAAD,EAESC,mBAAS,GAFlB,WAEdC,EAFc,KAELC,EAFK,KAiBrB,OAbAC,qBAAU,WAEN,GAAgB,IAAZF,EAAJ,CAEA,IAAMG,EAAQC,YAAW,WACrBH,GAAW,SAAAI,GAAW,OAAIA,EAAc,OACzC,KAEH,OAAO,WACHC,aAAaH,OAElB,CAACH,IAGA,kBAACO,EAAA,EAAD,CAAMC,MAAO7B,EAAOG,WACfkB,EAAU,EACP,kBAACO,EAAA,EAAD,CAAMC,MAAO5B,IAAW6B,QAAQ9B,EAAOQ,iBAAkB,CAACH,gBAAiBN,EAASsB,EAAU,MAC1F,kBAACU,EAAA,EAAD,CAAMF,MAAO7B,EAAOU,aAAcW,IAGtC,oCACI,kBAACW,EAAA,EAAD,CAAOH,MAAO7B,EAAOa,MAAOoB,OAAQxC,MACpC,kBAACmC,EAAA,EAAD,CAAMC,MAAO7B,EAAOe,cAChB,kBAACmB,EAAA,EAAD,CAAQC,QAAS,kBAAMb,EAAW,IAAIc,MAAM,mBCtCrD,SAASC,IAAO,IAAD,EACIjB,oBAAS,GADb,WACrBkB,EADqB,KACXC,EADW,KAG5B,OAAOD,EACL,kBAAC,EAAD,MAEA,kBAACV,EAAA,EAAD,CAAMC,MAAO7B,EAAOG,WAClB,kBAAC4B,EAAA,EAAD,CAAMF,MAAO7B,EAAOwC,QAApB,uBACA,kBAACT,EAAA,EAAD,CAAMF,MAAO7B,EAAOyC,OAApB,8BACA,kBAACb,EAAA,EAAD,CAAMC,MAAO7B,EAAOe,cAClB,kBAACmB,EAAA,EAAD,CAAQC,QAAS,kBAAMI,GAAY,IAAOH,MAAM,UAElD,kBAACM,EAAA,UAAD,CAAWb,MAAM,UAKvB,IAAM7B,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,UAElBiC,OAAQ,CACN7B,SAAU,GACVgC,OAAQ,IAEVF,MAAO,CACL9B,SAAU,IAEZI,aAAc,CACZN,MAAO,IACPO,UAAW,O,2DCpCX,kBAAmB4B,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,0BAA2B,CAAEC,MAAO,MAC7CC,MAAK,SAAUC,OAGfC,OAAM,SAAUC,GACfC,QAAQH,KAAK,oCAAqCE,U,mBCV1DE,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,uC","file":"static/js/app.d4ad5d52.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, StyleSheet, Text, View, Image } from 'react-native';\n\nconst rock = require('../signs/rock.png');\nconst paper = require('../signs/paper.png');\nconst scissors = require('../signs/scissors.png');\n\n// get a random emoji\nconst randomSign = () => {\n    const signs = [rock, paper, scissors];\n    const rand = Math.floor(Math.random() * signs.length);\n    return signs[rand];\n};\n\nconst bgColors = ['#1abc9c', '#3498db', '#9b59b6'];\n\nconst PlayScreen = () => {\n\n    const [counter, setCounter] = useState(3);\n    \n    useEffect(() => {\n        // check for counter to be 0, then stop the counter\n        if (counter === 0) return;\n        \n        const timer = setTimeout(() => {\n            setCounter(prevCounter => prevCounter - 1);    \n        }, 500);\n\n        return () => {\n            clearTimeout(timer);\n        }\n    }, [counter])\n\n    return (\n        <View style={styles.container}>\n            {counter > 0 ? (\n                <View style={StyleSheet.compose(styles.counterContainer, {backgroundColor: bgColors[counter - 1]})}>\n                    <Text style={styles.counterText}>{counter}</Text>\n                </View>\n            ) : (\n                <>\n                    <Image style={styles.image} source={randomSign()} />\n                    <View style={styles.btnContainer}>\n                        <Button onPress={() => setCounter(3)} title=\"Play Again\" />\n                    </View>\n                </>\n            )}\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    counterContainer: {\n        flex: 1,\n        width: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    counterText: {\n        fontSize: 150,\n        color: '#fff',\n    },\n    image: {\n        width: 200,\n        height: 200\n    },\n    btnContainer: {\n        marginTop: 60,\n        width: 240,\n        position: \"absolute\",\n        bottom: 20,  \n    },\n});\n\nexport default PlayScreen;","import { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport { Button, StyleSheet, Text, View } from 'react-native';\nimport PlayScreen from './src/components/PlayScreen';\n\nexport default function App() {\n  const [playMode, setPlayMode] = useState(false);\n\n  return playMode ? (\n    <PlayScreen />\n  ) :  (\n    <View style={styles.container}>\n      <Text style={styles.header}>Rock Paper Scissors</Text>\n      <Text style={styles.emoji}>✊ ✋ ✌️</Text>\n      <View style={styles.btnContainer}>\n        <Button onPress={() => setPlayMode(true)} title=\"Play\" />\n      </View>\n      <StatusBar style=\"auto\" />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  header: {\n    fontSize: 28,\n    margin: 10\n  },\n  emoji: {\n    fontSize: 60,\n  },\n  btnContainer: {\n    width: 240,\n    marginTop: 60\n  },\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/rock.337d558c.png\";","module.exports = __webpack_public_path__ + \"static/media/paper.d4a03a15.png\";","module.exports = __webpack_public_path__ + \"static/media/scissors.004f1986.png\";"],"sourceRoot":""}